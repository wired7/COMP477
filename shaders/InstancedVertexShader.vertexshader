#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexColor;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec2 tCoordinate;
layout(location = 4) in vec3 position;

// Output data ; will be interpolated for each fragment.
out vec3 n;
out vec4 vColor;
out vec3 FragPos;

// Values that stay constant for the whole mesh.
uniform vec3 Scale;
uniform mat4 View;
uniform mat4 Projection;

void main(){

	gl_Position = Projection * View * vec4(Scale * vertexPosition_modelspace + position, 1);
	
	FragPos = Scale * vertexPosition_modelspace + position;

	n = normal;
	n = normalize(n);

	vColor = vertexColor;
}

