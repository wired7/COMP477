#version 410 core

layout(location = 2) in vec3 normal;

// Interpolated values from the vertex shaders
in vec4 vColor;
in vec4 fragPos;
in vec2 textureCoordinate;

uniform mat4 View;
uniform mat4 Model;
uniform sampler2D tx;

// Ouput data
out vec4 color;

void main(){
	
	// Output color = color specified in the vertex shader, 
	// interpolated between all 3 surrounding vertices

	vec4 c = vColor;
	float alpha = c.w;
	vec3 lightPos = vec3(0, 1, 0);
	vec3 n = normalize(vec3(View * transpose(inverse(Model)) * vec4(normal, 1)));
	color = c * 40 / (1 + pow(length(vec3(fragPos) - lightPos), 2));
	color *= clamp(dot(n, -normalize(fragPos.xyz - lightPos)), 0, 1);
	color = clamp(texture(tx, textureCoordinate) * color, vec4(0.2 * c.xyz, alpha), vec4(c.xyz, alpha));

}